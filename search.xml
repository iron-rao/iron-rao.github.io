<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo建站测试-从树莓派到Windows</title>
    <url>/2021/01/21/FirstTest/</url>
    <content><![CDATA[<p>Hexo建站测试，一开始选择的是树莓派，但是经过一番折腾还是选择了在Windows上调试然后经过Github的自带的github.io去做。</p>
<a id="more"></a>

<h2 id="树莓派上环境搭建"><a href="#树莓派上环境搭建" class="headerlink" title="树莓派上环境搭建"></a>树莓派上环境搭建</h2><p>这边来记录一下从零开始的搭建过程<br>主要的还是基于github的github.io<br>对于会的人来说应该很快就好了，说起来确实也就几分钟的时间在敲代码上，但是花了蛮久时间研究问题的。<br>主要的步骤是这样的，先在树莓派上搭建了Node.js+Hexo的框架，然后在去找了个域名，也就是ironrao.xyz。<br>emmm说起来好像我的github的usr name还是iron-rao，不知道能不能改掉。这个”-“好麻烦。之后再看。<br>然后现在基本的框架搭好了，但是插件还没装。之后几天再研究一下。</p>
<p>这里有个网页，之后还有好多东西要参考一下：<br>源自知乎<br><a href="https://zhuanlan.zhihu.com/p/35668237">https://zhuanlan.zhihu.com/p/35668237</a><br>orz 看了一下这个确实好厉害，这个整个的主题就和这种原来的Next的主题不一样，太厉害了orz。<br>有评论区，有目录，有水印，还有网易云的BGM。</p>
<p>还有字数统计什么的常用工具，也可以放照片，太心动了，明天就换它看看。</p>
<hr>
<p>然后在晚上看了看这个界面，emmm，大红大紫的感觉不好看orz。<br>去github上找了，archer&amp;ayer&amp;catus。试了试这三个。感觉都不是自己想要的。但是我还觉得catus的风格还挺好的，就是不知道为什么在编译的时候报错了，也不知道报错怎么解决。（还截了个屏，之后放上去）。在baidu bug的时候正好遇到了这个<a href="https://www.jianshu.com/p/9f0e90cc32c2">网站</a>。<br>里面啥都有，教我怎么配置Next。还有<a href="https://io-oi.me/tech/hexo-next-optimization/">这个</a>。<br>于是乎换回了Next的theme之后再瞅瞅。</p>
<p>然后之后找到github上的Hexo Themes的list <a href="https://github.com/hexojs/hexo/wiki/Themes">Hexo Themes</a></p>
<p>有件很有意思的bug是啊，就是在_config.yml里第一段Site中的laguage写了en&amp;cn, 然后网页在远端的格式就崩了，在本地还是好好的orz。调回en就好了。</p>
<p>而且在root/scaffolds的post.md文件里可以定义每次的模版，下次就不用一直写了。hexo new post name是新发布一个，就和发布说说一样。hexo new draft name就是新建个草稿，不会发出去的。</p>
<hr>
<h2 id="Windows上Hexo搭建"><a href="#Windows上Hexo搭建" class="headerlink" title="Windows上Hexo搭建"></a>Windows上Hexo搭建</h2><p>2021.01.21<br>来更新一下，昨天是在树莓派上搭建环境的，跟着<a href="https://zhuanlan.zhihu.com/p/108550672">这个</a>教程。然后今天想着在windows上也搭个环境，以为挺快的。好家伙，花了我三个小时。</p>
<p>来记一下坑，<br>前面的安装就不提了，去nodejs上找一下对应版本的安装。<br>然后建个文件夹放blog的东西，之后再</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<p>然后</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git -save</span><br></pre></td></tr></table></figure>
<p>就遇到了这个问题orz</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*</span><br><span class="line"></span><br><span class="line">  Verion 9 of Highlight.js has reached EOL.  It will no longer</span><br><span class="line">  be supported or receive security updates in the future.</span><br><span class="line">  Please upgrade to version 10 or encourage your indirect</span><br><span class="line">  dependencies to do so.</span><br><span class="line"></span><br><span class="line">  For more info:</span><br><span class="line"></span><br><span class="line">  https://github.com/highlightjs/highlight.js/issues/2877</span><br><span class="line">  https://github.com/highlightjs/highlight.js/blob/master/VERSION_10_UPGRADE.md</span><br><span class="line"></span><br><span class="line">-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*</span><br><span class="line">+ hexo-deployer-git@2.1.0</span><br></pre></td></tr></table></figure>
<p>说的是这个Highlight不支持V9版本了，叫我升级。然后我研究了半天它给的链接。发现没啥用，只能手动升级。最后还是打算先放着，试试再说。</p>
<p>然后</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init &amp;&amp; git remote add origin https://github.com/xxx/xxx.github.io.git</span><br></pre></td></tr></table></figure>
<p>改了改_config.yml的文件，然后测了下，通了。<br>这个报错也emmmmm，太迷惑了。</p>
<p>之后就打算写了两个脚本一键刷新和部署。<br>然后发现windows的cmd不可以直接<code>hexo </code>操作……<br>然后改用bat文件打开git bash，去用git bash 操作一下，</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="comment">@REM Publish.bat</span></span><br><span class="line"><span class="built_in">start</span> C:\&quot;Program Files&quot;\Git\git-bash.exe -c &quot;hexo clean &amp;&amp; hexo g &amp;&amp; cp CNAME public &amp;&amp; hexo d&quot;</span><br></pre></td></tr></table></figure>
<p>还想尝试一下坚果云能不能同步，发现不太行。因为坚果云的文件夹是中文的，它找不到这个文件夹。而且换成英文的话，它是xxx xxx的形式，中间的空格会被识别错误orz。（之前在ROS的时候也遇到过）。<br>所以还是换Github或者Gitee同步一下叭。</p>
<hr>
<h2 id="源文件备份"><a href="#源文件备份" class="headerlink" title="源文件备份"></a>源文件备份</h2><p>之后用了<a href="https://github.com/coneycode/hexo-git-backup">hexo-git-backup</a> 的插件git备份了源码，方便在笔记本上也可以调试。</p>
<p>然后设置了下面的备份设置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">backup:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">next</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">Back</span> <span class="string">up</span> </span><br><span class="line">  <span class="attr">repository:</span></span><br><span class="line">    <span class="attr">github:</span> <span class="string">git@github.com:iron-rao/iron-rao.github.io.git,backup</span></span><br><span class="line">    <span class="attr">gitee:</span> <span class="string">git@gitee.com:iron-rao/hexo.git,master</span></span><br></pre></td></tr></table></figure>
<p>发现了以下的报错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fatal: &#39;gitee&#39; does not appear to be a git repository</span><br><span class="line">fatal: Could not read from remote repository.</span><br></pre></td></tr></table></figure>
<p>很迷惑，查了半天好像是<code>git remote</code>的问题，吃了不熟练git的亏。<br>调试了半天发现以下的仓库链接是对的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">backup  git@github.com:iron-rao&#x2F;iron-rao.github.io.git (fetch)</span><br><span class="line">backup  git@github.com:iron-rao&#x2F;iron-rao.github.io.git (push)</span><br><span class="line">gitee   git@gitee.com:iron-rao&#x2F;hexo.git (fetch)</span><br><span class="line">gitee   git@gitee.com:iron-rao&#x2F;hexo.git (push)</span><br><span class="line">github  git@github.com:iron-rao&#x2F;iron-rao.github.io.git (fetch)</span><br><span class="line">github  git@github.com:iron-rao&#x2F;iron-rao.github.io.git (push)</span><br><span class="line">master  git@gitee.com:iron-rao&#x2F;hexo.git (fetch)</span><br><span class="line">master  git@gitee.com:iron-rao&#x2F;hexo.git (push)</span><br><span class="line">origin  git@github.com:ironrao&#x2F;iron-rao.github.io.git (fetch)</span><br><span class="line">origin  git@github.com:ironrao&#x2F;iron-rao.github.io.git (push)</span><br></pre></td></tr></table></figure>
<p>只要</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add repository_第x行冒号前的 第x行冒号后的</span><br><span class="line">git remote add 第x行的分支名 第x行冒号后的</span><br></pre></td></tr></table></figure>
<p>对我来说就是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add github git@github.com:iron-rao&#x2F;iron-rao.github.io.git</span><br><span class="line">git remote add backup git@github.com:iron-rao&#x2F;iron-rao.github.io.git</span><br><span class="line">git remote add gitee git@gitee.com:iron-rao&#x2F;hexo.git</span><br><span class="line">git remote add master git@gitee.com:iron-rao&#x2F;hexo.git</span><br></pre></td></tr></table></figure>
<p>这样就行。原来还有个origin那个是用来给<code>hexo d</code>推送部署的。之前也踩过坑了。<br>然后就可以愉快的用Typora写markdown了。</p>
]]></content>
      <tags>
        <tag>web 树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>Pelican</title>
    <url>/2021/01/24/Pelican/</url>
    <content><![CDATA[<p>用Python Pelican 建站的一些尝试。</p>
<a id="more"></a>

<h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><p>首先找到<a href="https://pelican-cn.readthedocs.io/zh_CN/latest/quickstart.html">官方文档</a></p>
<p>然后还有个指导性的<a href="https://linux.cn/article-10471-1.html">文件</a></p>
<p>这边先尝试用conda新建个环境，以免出bug然后炸了环境orz。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create -n Pelican python=3.6</span><br></pre></td></tr></table></figure>
<p>等环境安装好了之后再激活</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda activate Pelican</span><br></pre></td></tr></table></figure>
<p>之后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install pelican markdown</span><br></pre></td></tr></table></figure>
<p>然后在你的项目文件夹里，我的是 <code>D:\Pelican</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(Pelican) D:\Pelican&gt;pelican-quickstart</span><br><span class="line">Welcome to pelican-quickstart v4.5.4.</span><br><span class="line"></span><br><span class="line">This script will <span class="built_in">help</span> you create a new Pelican-based website.</span><br><span class="line"></span><br><span class="line">Please answer the following questions so this script can generate the files</span><br><span class="line">needed by Pelican.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; Where <span class="keyword">do</span> you want to create your new web site? [.] iGEM Wiki</span><br><span class="line">&gt; What will be the title of this web site? iGEM</span><br><span class="line">&gt; Who will be the author of this web site? IronRao</span><br><span class="line">&gt; What will be the default language of this web site? [Chinese (Simplified)]</span><br><span class="line">&gt; Do you want to specify a URL prefix? e.g., https://example.com   (Y/n) n</span><br><span class="line">&gt; Do you want to <span class="built_in">enable</span> article pagination? (Y/n)</span><br><span class="line">&gt; How many articles per page <span class="keyword">do</span> you want? [10] 10</span><br><span class="line">&gt; What is your time zone? [Europe/Paris]</span><br><span class="line">&gt; Do you want to generate a tasks.py/Makefile to automate generation and publishing? (Y/n) Y</span><br><span class="line">&gt; Do you want to upload your website using FTP? (y/N)</span><br><span class="line">&gt; Do you want to upload your website using SSH? (y/N)</span><br><span class="line">&gt; Do you want to upload your website using Dropbox? (y/N)</span><br><span class="line">&gt; Do you want to upload your website using S3? (y/N)</span><br><span class="line">&gt; Do you want to upload your website using Rackspace Cloud Files? (y/N)</span><br><span class="line">&gt; Do you want to upload your website using GitHub Pages? (y/N)</span><br><span class="line">Done. Your new project is available at D:\Pelican\iGEM Wiki</span><br></pre></td></tr></table></figure>
<p>进入 <code>D:\Pelican\iGEM Wiki</code> </p>
<p>看到有</p>
<p><img src="https://ironrao.oss-cn-shanghai.aliyuncs.com/img/20210124203243.png" alt="QQ截图20210124203218"></p>
<p><code>cd D:\Pelican\iGEM Wiki\content</code></p>
<p>新建一个markdown文件叫test.md</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Title: My super title</span><br><span class="line">Date: 2010-12-03 10:20</span><br><span class="line">Category: Python</span><br><span class="line">Tags: pelican, publishing</span><br><span class="line">Slug: my-super-post</span><br><span class="line">Author: Alexis Metaireau</span><br><span class="line">Summary: Short version for index and feeds</span><br><span class="line"></span><br><span class="line">This is the content of my super blog post.</span><br></pre></td></tr></table></figure>
<p>然后在<code>D:\Pelican\iGEM Wiki</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(Pelican) D:\Pelican\iGEM Wiki&gt;pelican content</span><br><span class="line">WARNING: Docutils has no localization for &#39;chinese (simplified)&#39;. Using &#39;en&#39; instead.</span><br><span class="line">WARNING: Watched path does not exist: D:\Pelican\iGEM Wiki\content\images</span><br><span class="line">Done: Processed 1 article, 0 drafts, 0 pages, 0 hidden pages and 0 draft pages in 0.36 seconds.</span><br></pre></td></tr></table></figure>
<p>这就说明已经有输出了，在<code>output</code>里。</p>
<p>对于我是python3对应的语法，启动http sever是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(Pelican) D:\Pelican\iGEM Wiki\output&gt;python -m http.server</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8000 (http:&#x2F;&#x2F;0.0.0.0:8000&#x2F;) ...</span><br></pre></td></tr></table></figure>
<p>可以看到有东西了，在<code>http://localhost:8000/</code></p>
<p><img src="https://ironrao.oss-cn-shanghai.aliyuncs.com/img/20210124203843.png" alt="QQ截图20210124203834"></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>图床配置(picGo+Typora+AliyunOSS)</title>
    <url>/2021/01/22/PicGo-Typora-AliyunOSS/</url>
    <content><![CDATA[<p>主要折腾这个是因为在github上部署图片会导致文件内容过多然后更新部署的太慢了。<br>所以采用了图片和文档分离的做法。</p>
<p>先用了picGo + gitee 然后发现有问题，而且一点也不方便。后来就用了OSS。</p>
<a id="more"></a>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>主要折腾这个是因为在github上部署图片会导致文件内容过多然后更新部署的太慢了。<br>所以采用了图片和文档分离的做法。</p>
<h2 id="picGo-Gitee"><a href="#picGo-Gitee" class="headerlink" title="picGo + Gitee"></a>picGo + Gitee</h2><p>这个主要是参考的知乎上<a href="https://zhuanlan.zhihu.com/p/344257987">Typora 配置PicGo使用Gitee图床创作设置</a>， 然后确实在最后的时候是可以通过Typroa的上传测试，但是在图片上云之后不知道为什么就显示不出来。<br>而且把链接输进浏览器里也是可以使用的。<br>emmm<br>然后看CSDN上<a href="https://www.cnblogs.com/AhuntSun-blog/p/12675620.html">使用Gitee搭建个人图床</a>说可以用Gitee的page来访问，试了一下，确实是可以的。<br>但是！！<br>==每次部署之后，都相当于永远定格在了部署那一刻的仓库状态；如果仓库发生变化，比如添加文件，或删除文件，部署出来的内容都不会改变。相当于部署的时候，服务器将当前状态的仓库复制了一份，只要不更新部署，部署的内容就不会改变。所以每次更新仓库内容后，要同步更新部署==</p>
<p>引CSDN的一张图</p>
<p><img src="https://ironrao.oss-cn-shanghai.aliyuncs.com/img/20210122204906.png" alt="4"></p>
<p>合着这不是还要再来一个网站框架？？？</p>
<p>好叭本着坚持不懈的精神我在网上找了“自动部署Gitee Page”的方法。找到了是找到了，但是要么是用python自动登录爬取（来自<a href="https://blog.csdn.net/HYDCS/article/details/107464930">CSDN</a>），要么又是个Hexo。</p>
<p>嗯，转战下个</p>
<h2 id="picGo-OSS"><a href="#picGo-OSS" class="headerlink" title="picGo + OSS"></a>picGo + OSS</h2><p>这个直接参考了这个大哥的<a href="https://zhuanlan.zhihu.com/p/104152479">阿里云OSS PicGo 配置图床教程 超详细</a>。</p>
<p>很顺利，然后来到了最后一步。</p>
<p><img src="https://ironrao.oss-cn-shanghai.aliyuncs.com/img/20210122205649.png" alt="QQ截图20210122205548"></p>
<p>我：？？？</p>
<p>回去查了半天不知道发生了什么。</p>
<p>后来在</p>
<p><img src="https://ironrao.oss-cn-shanghai.aliyuncs.com/img/20210122205734.png" alt="QQ截图20210122205730"></p>
<p><em>PicGo设置-&gt;打开配置文件</em> 找到了问题。</p>
<p><img src="https://ironrao.oss-cn-shanghai.aliyuncs.com/img/20210122205933.png" alt="A31CD1FE0DC41671588BC88552915D94"></p>
<p>多了个空格……这谁看的出来啊。只有在配置文件里才明显一点。</p>
<p>行吧可能是我眼睛不好。</p>
<p>嗯，然后就可以成功了。</p>
<p><img src="https://ironrao.oss-cn-shanghai.aliyuncs.com/img/20210122205958.png" alt="QQ截图20210122205609"></p>
<hr>
<h2 id="New-bug"><a href="#New-bug" class="headerlink" title="New bug:"></a>New bug:</h2><h3 id="Typora配置PicGo提示failed-to-fetch"><a href="#Typora配置PicGo提示failed-to-fetch" class="headerlink" title="Typora配置PicGo提示failed to fetch"></a>Typora配置PicGo提示failed to fetch</h3><p>之后的使用中，有遇到一个问题。</p>
<p><img src="https://ironrao.oss-cn-shanghai.aliyuncs.com/img/20210124175337.png" alt="QQ截图20210124174827"></p>
<p>但是实际上PicGo单独上传的时候是可以用的。</p>
<p>测试的时候它报错了，查了半天的bug，后来发现错误是由 <strong>PicGo设置-&gt;设置Server</strong> 造成的。</p>
<p>因为将PicGo server 的端口h不是Typora 监听的端口。Typroa的监听端口是36677.</p>
<p>之前是这样的设置</p>
<p><img src="https://ironrao.oss-cn-shanghai.aliyuncs.com/img/20210124175338.png" alt="QQ截图20210124175118"></p>
<p>后来改成</p>
<p><img src="https://ironrao.oss-cn-shanghai.aliyuncs.com/img/20210124175158.png" alt="QQ截图20210124175153"></p>
<p>就可以了。</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/01/20/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>RasberryPi4BTest</title>
    <url>/2021/01/22/RasberryPi4BTest/</url>
    <content><![CDATA[<p>最近想着怎么用树莓派和STM32做通信，尝试能不能烧写或者读取STM32的数据。就先试试树莓派的GPIO。</p>
<a id="more"></a>



<h1 id="树莓派的简单测试"><a href="#树莓派的简单测试" class="headerlink" title="树莓派的简单测试"></a>树莓派的简单测试</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近想着怎么用树莓派和STM32做通信，尝试能不能烧写或者读取STM32的数据。就先试试树莓派的GPIO。</p>
<h2 id="点亮个LED"><a href="#点亮个LED" class="headerlink" title="点亮个LED"></a>点亮个LED</h2><p>网上找了下树莓派的官方文档，<a href="https://www.raspberrypi.org/documentation/usage/gpio/">关于GPIO</a></p>
<p>然后手头没有LED orz，就找了个Arduino的输入，反正有电了就会亮。</p>
<p>Pi GND  -&gt;Arduino GND<br>Pi Pin21-&gt;Arduino 5V</p>
<p><img src="https://ironrao.oss-cn-shanghai.aliyuncs.com/img/20210122201858.JPG" alt="IMG_7122"></p>
<p>官方给的介绍里写了关于树莓派的GPIO的引脚设置，用<code>pinout</code>就可以看。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pi@raspberrypi:~ $ pinout</span><br><span class="line">,--------------------------------.</span><br><span class="line">| oooooooooooooooooooo J8   +======</span><br><span class="line">| 1ooooooooooooooooooo  PoE |   Net</span><br><span class="line">|  Wi                    oo +======</span><br><span class="line">|  Fi  Pi Model 4B  V1.1 oo      |</span><br><span class="line">|        ,----.               +====</span><br><span class="line">| |D|    |SoC |               |USB3</span><br><span class="line">| |S|    |    |               +====</span><br><span class="line">| |I|    `----<span class="string">&#x27;                  |</span></span><br><span class="line"><span class="string">|                   |C|       +====</span></span><br><span class="line"><span class="string">|                   |S|       |USB2</span></span><br><span class="line"><span class="string">| pwr   |HD|   |HD| |I||A|    +====</span></span><br><span class="line"><span class="string">`-| |---|MI|---|MI|----|V|-------&#x27;</span></span><br><span class="line"></span><br><span class="line">Revision           : a03111</span><br><span class="line">SoC                : BCM2711</span><br><span class="line">RAM                : 1024Mb</span><br><span class="line">Storage            : MicroSD</span><br><span class="line">USB ports          : 4 (excluding power)</span><br><span class="line">Ethernet ports     : 1</span><br><span class="line">Wi-fi              : True</span><br><span class="line">Bluetooth          : True</span><br><span class="line">Camera ports (CSI) : 1</span><br><span class="line">Display ports (DSI): 1</span><br><span class="line"></span><br><span class="line">J8:</span><br><span class="line">   3V3  (1) (2)  5V</span><br><span class="line"> GPIO2  (3) (4)  5V</span><br><span class="line"> GPIO3  (5) (6)  GND</span><br><span class="line"> GPIO4  (7) (8)  GPIO14</span><br><span class="line">   GND  (9) (10) GPIO15</span><br><span class="line">GPIO17 (11) (12) GPIO18</span><br><span class="line">GPIO27 (13) (14) GND</span><br><span class="line">GPIO22 (15) (16) GPIO23</span><br><span class="line">   3V3 (17) (18) GPIO24</span><br><span class="line">GPIO10 (19) (20) GND</span><br><span class="line"> GPIO9 (21) (22) GPIO25</span><br><span class="line">GPIO11 (23) (24) GPIO8</span><br><span class="line">   GND (25) (26) GPIO7</span><br><span class="line"> GPIO0 (27) (28) GPIO1</span><br><span class="line"> GPIO5 (29) (30) GND</span><br><span class="line"> GPIO6 (31) (32) GPIO12</span><br><span class="line">GPIO13 (33) (34) GND</span><br><span class="line">GPIO19 (35) (36) GPIO16</span><br><span class="line">GPIO26 (37) (38) GPIO20</span><br><span class="line">   GND (39) (40) GPIO21</span><br><span class="line"></span><br><span class="line">For further information, please refer to https://pinout.xyz/</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>之后用python创建脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> GPIO            <span class="comment">#导入树莓派提供的python模块</span></span><br><span class="line">GPIO.setmode(GPIO.BCM)        <span class="comment">#设置GPIO模式，BCM模式在所有数码派通用</span></span><br><span class="line">GPIO.setup(<span class="number">21</span>, GPIO.OUT)       <span class="comment">#设置GPIO21为电流输出</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> 然后run一下，<code>python3 Raspi-LED.py</code> 就可以了。  </p>
]]></content>
      <categories>
        <category>RasberryPi</category>
      </categories>
      <tags>
        <tag>RasberryPi</tag>
      </tags>
  </entry>
  <entry>
    <title>iGEM_wiki</title>
    <url>/2021/01/24/iGEM-wiki/</url>
    <content><![CDATA[<p>这是摘要</p>
<p>This is something to memo about iGEM wiki.</p>
<a id="more"></a>



<p>这是iGEM的wiki example</p>
<p><a href="https://2020.igem.org/Team:Example2">https://2020.igem.org/Team:Example2</a></p>
<p>r然后这边给了一些iGEM的HTML，CSS的例子</p>
<p>然后看到了<a href="https://2020.igem.org/Template:Example2">Template:Example2</a></p>
<p>emmm</p>
<p>这啥？</p>
<p><img src="https://ironrao.oss-cn-shanghai.aliyuncs.com/img/20210124175613.png" alt="QQ截图20210124173003"></p>
<p>就这？这是不是意味着我可以在里面构建一个Hexo的框架？然后快速部署？emmm，最多再用个python删一下里面不要的东西。</p>
]]></content>
      <tags>
        <tag>igem</tag>
      </tags>
  </entry>
</search>
